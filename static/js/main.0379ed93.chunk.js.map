{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searhTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","searchTerm","className","style","fontSize","display","paddingTop","paddingBottomL","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6BeA,6LAtBP,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,mCAIvB,OAAOQ,EAAAC,EAAAC,cAAA,SAAOC,IAAKV,KAAKC,MAAMC,MAAMC,IACpCI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,MAAM,MAAMC,IAAKb,KAAKC,MAAMC,MAAMY,cAEtDP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMa,OACtBR,EAAAC,EAAAC,cAAA,SAAIT,KAAKC,MAAMC,MAAMc,UACrBT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASC,QAASlB,KAAKmB,UAAUC,KAAKpB,MAAOqB,MAAM,oBAnBtDC,IAAMC,4BC+FdC,cAzFb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,KAAMC,KACD8B,MAAQ,GAgBbN,EAAKO,cAAc,WAlBFP,6EAsBLQ,GAAW,IAAAC,EAAAlC,KACvBmC,QAAQC,IAAI,gCACZ,IAAMC,EAAY,yGAA2GJ,EAC7HK,IAAEC,KAAK,CACLxC,IAAKsC,EACLG,QAAS,SAACC,GACRN,QAAQC,IAAI,6BAEZ,IAAMM,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAAC1C,GACfA,EAAMY,WAAa,kCAAoCZ,EAAM2C,YAC7DV,QAAQC,IAAIlC,EAAM2C,aAClB,IAAMC,EAAWvC,EAAAC,EAAAC,cAACsC,EAAD,CAAU7C,MAAOA,IAClCyC,EAAUK,KAAKF,KAGjBZ,EAAKe,SAAS,CAACC,KAAMP,KAEvBQ,MAAO,SAACC,EAAKC,EAAQC,GACnBnB,QAAQC,IAAI,uEAKEmB,GAClBpB,QAAQC,IAAImB,EAAMC,OAAOnC,OACzB,IACMoC,EAAaF,EAAMC,OAAOnC,MADZrB,KAERgC,cAAcyB,oCAI1B,OACElD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,YACfnD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,cAErCN,EAAAC,EAAAC,cAAA,MAAIG,MAAM,MACVL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uEAMRF,EAAAC,EAAAC,cAAA,SAAOkD,MAAO,CACZC,SAAU,GACVC,QAAS,QACTjD,MAAO,MACPkD,WAAY,EACZC,eAAgB,EAChBC,YAAa,IACZC,SAAUjE,KAAKkE,oBAAoB9C,KAAKpB,MAAOmE,YAAY,qBAE7DnE,KAAK+B,MAAMmB,aArFJ3B,aCNE6C,QACW,cAA7BhE,OAAOC,SAASgE,UAEe,UAA7BjE,OAAOC,SAASgE,UAEhBjE,OAAOC,SAASgE,SAASC,MACvB,2DCANC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0379ed93.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MovieRow extends React.Component {\r\n\r\n    viewMovie() {\r\n        // console.log(\"Trying to view movie\")\r\n        // console.log(this.props.movie.title)\r\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n        window.location.href = url\r\n    }\r\n\r\n    render() {\r\n        return <table key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n            </td>\r\n            <td>\r\n              <h3>{this.props.movie.title}</h3>\r\n              <p>{this.props.movie.overview}</p>\r\n              <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow;","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n  //   console.log(\"This is my initializer\")\n\n  //   const movies = [\n  //     {id: 0, poster_src: \"https://image.tmdb.org/t/p/w500/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\", title: \"aaa\", overview: \"AAA\"},\n  //     {id: 1, poster_src: \"https://image.tmdb.org/t/p/w500/cezWGskPY5x7GaglTTRN4Fugfb8.jpg\", title: \"bbb\", overview:\"BBB\"}\n  //   ]\n\n  //   var movieRows =[] \n  //   movies.forEach((movie) => {\n  //     console.log(movie.title)\n  //     const movieRow = <MovieRow movie={movie} />\n  //     movieRows.push(movieRow)\n  //   })\n\n  //   this.state = {rows: movieRows}\n    this.performSearch(\"ant man\")\n \n  }\n\n  performSearch(searhTerm) {\n    console.log(\"Perfome search using moviedb\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?query=marvel&api_key=4e6780defbd7a37867fcacee22813400&query=\" + searhTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\")\n      //  console.log(searchResults)\n        const results = searchResults.results\n      //  console.log(results[0])\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          console.log(movie.poster_path)\n          const movieRow = <MovieRow movie={movie} />\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.log(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n          <table className=\"titleBar\">\n            <tbody>\n              <tr>\n                <td>\n                  <img alt=\"app icon\" width=\"60\" src=\"logo.svg\"/>\n                </td>\n                <td width=\"8\"/>\n                <td>\n                  <h2>영화 DB 검색 프로젝트</h2>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n\n          <input style={{\n            fontSize: 20,\n            display: 'block',\n            width: \"99%\",\n            paddingTop: 8,\n            paddingBottomL: 8,\n            paddingLeft: 16\n          }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter serah term\"/>\n\n          {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}